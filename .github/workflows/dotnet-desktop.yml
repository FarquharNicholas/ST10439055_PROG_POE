name: .NET Desktop App CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: ST10439055_PROG_POE.sln                      # Your .sln file name
      Test_Project_Path: ST10439055_PROG_POE.Tests\ST10439055_PROG_POE.Tests.csproj  # Path to your test project
      Wap_Project_Directory: ST10439055_PROG_POE.Package          # Folder containing your packaging project
      Wap_Project_Path: ST10439055_PROG_POE.Package\ST10439055_PROG_POE.Package.wapproj

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}

    - name: Build solution
      run: msbuild $env:Solution_Name /p:Configuration=${{ matrix.configuration }}

    - name: Run unit tests
      run: dotnet test $env:Test_Project_Path --configuration ${{ matrix.configuration }}

    - name: Decode signing certificate
      run: |
        $certBytes = [Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        [System.IO.File]::WriteAllBytes("$env:Wap_Project_Directory\GitHubActionsWorkflow.pfx", $certBytes)

    - name: Create MSIX Package
      run: msbuild $env:Wap_Project_Path `
            /p:Configuration=${{ matrix.configuration }} `
            /p:UapAppxPackageBuildMode=StoreUpload `
            /p:AppxBundle=Always `
            /p:AppxBundlePlatforms="x86|x64" `
            /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx `
            /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}

    - name: Clean up certificate
      run: Remove-Item "$env:Wap_Project_Directory\GitHubActionsWorkflow.pfx"

    - name: Upload MSIX Package
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
